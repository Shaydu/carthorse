#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Hardcoded values to replace with configurable functions
const REPLACEMENTS = [
    // Spatial tolerances
    { pattern: /DEFAULT 1\.0/g, replacement: 'DEFAULT get_intersection_tolerance()' },
    { pattern: /DEFAULT 2\.0/g, replacement: 'DEFAULT get_intersection_tolerance()' },
    { pattern: /0\.001/g, replacement: 'get_simplify_tolerance()' },
    
    // Processing settings
    { pattern: /1000/g, replacement: 'get_batch_size()' },
    { pattern: /30000/g, replacement: 'get_timeout_ms()' },
    
    // Validation thresholds
    { pattern: /MIN_TRAIL_LENGTH_KM: 0\.001/g, replacement: 'MIN_TRAIL_LENGTH_KM: get_carthorse_config() ->> \'min_trail_length_meters\'::float / 1000' },
    { pattern: /MAX_TRAIL_LENGTH_KM: 1000/g, replacement: 'MAX_TRAIL_LENGTH_KM: get_carthorse_config() ->> \'max_trail_length_meters\'::float / 1000' },
    { pattern: /MIN_ELEVATION_M: -1000/g, replacement: 'MIN_ELEVATION_M: get_carthorse_config() ->> \'min_elevation_meters\'::float' },
    { pattern: /MAX_ELEVATION_M: 9000/g, replacement: 'MAX_ELEVATION_M: get_carthorse_config() ->> \'max_elevation_meters\'::float' },
    { pattern: /MIN_COORDINATE_POINTS: 2/g, replacement: 'MIN_COORDINATE_POINTS: get_carthorse_config() ->> \'min_coordinate_points\'::integer' },
    { pattern: /MAX_COORDINATE_POINTS: 10000/g, replacement: 'MAX_COORDINATE_POINTS: get_carthorse_config() ->> \'max_coordinate_points\'::integer' },
    
    // Route discovery settings
    { pattern: /maxRoutesPerBin: 10/g, replacement: 'maxRoutesPerBin: get_max_routes_per_bin()' },
    { pattern: /minRouteScore: 0\.7/g, replacement: 'minRouteScore: get_min_route_score()' },
    { pattern: /minRouteDistanceKm: 1\.0/g, replacement: 'minRouteDistanceKm: (get_route_distance_limits() ->> \'min_km\')::float' },
    { pattern: /maxRouteDistanceKm: 10\.0/g, replacement: 'maxRouteDistanceKm: (get_route_distance_limits() ->> \'max_km\')::float' },
    { pattern: /minElevationGainMeters: 10/g, replacement: 'minElevationGainMeters: (get_elevation_gain_limits() ->> \'min_meters\')::float' },
    { pattern: /maxElevationGainMeters: 5000/g, replacement: 'maxElevationGainMeters: (get_elevation_gain_limits() ->> \'max_meters\')::float' },
    
    // Route scoring weights
    { pattern: /distanceWeight: 0\.4/g, replacement: 'distanceWeight: (get_scoring_weights() ->> \'distance_weight\')::float' },
    { pattern: /elevationWeight: 0\.3/g, replacement: 'elevationWeight: (get_scoring_weights() ->> \'elevation_weight\')::float' },
    { pattern: /qualityWeight: 0\.3/g, replacement: 'qualityWeight: (get_scoring_weights() ->> \'quality_weight\')::float' },
    
    // Cost weighting
    { pattern: /steepnessWeight: 2\.0/g, replacement: 'steepnessWeight: (get_cost_weights() ->> \'steepness_weight\')::float' },
    { pattern: /distanceWeight: 0\.5/g, replacement: 'distanceWeight: (get_cost_weights() ->> \'distance_weight\')::float' },
    
    // Route patterns (replace hardcoded patterns with configurable ones)
    { pattern: /INSERT INTO route_patterns VALUES[\s\S]*?\);/, replacement: '-- Route patterns now loaded from config via get_route_patterns()' },
    
    // Similarity score calculation
    { pattern: /GREATEST\(0, 1 - \([\s\S]*?\) \/ 2\) as similarity_score/, replacement: 'calculate_route_similarity_score(total_distance_km, $2, total_elevation_gain, $4) as similarity_score' },
    
    // Route cost calculation
    { pattern: /\(steepness \* steepnessWeight\) \+ \(distance \* distanceWeight\)/, replacement: 'calculate_route_cost(steepness, distance)' },
    
    // Limits and thresholds
    { pattern: /LIMIT 50/, replacement: 'LIMIT get_max_routes_per_bin()' },
    { pattern: /similarity_score > 0\.7/, replacement: 'similarity_score >= get_min_route_score()' },
    { pattern: /similarity_score > 0\.8/, replacement: 'similarity_score >= get_min_route_score()' }
];

// Update a single SQL file
function updateSqlFile(filePath) {
    try {
        let content = fs.readFileSync(filePath, 'utf8');
        let updated = false;
        
        // Apply all replacements
        REPLACEMENTS.forEach(replacement => {
            if (replacement.pattern.test(content)) {
                content = content.replace(replacement.pattern, replacement.replacement);
                updated = true;
            }
        });
        
        if (updated) {
            // Add config dependency comment at the top
            const configComment = `-- =============================================================================
-- CONFIGURABLE VERSION - Uses values from configs/carthorse.config.yaml and configs/route-discovery.config.yaml
-- Generated by update-sql-with-configs.js
-- =============================================================================
`;
            
            if (!content.includes('CONFIGURABLE VERSION')) {
                content = configComment + content;
            }
            
            fs.writeFileSync(filePath, content);
            console.log(`✅ Updated: ${filePath}`);
            return true;
        } else {
            console.log(`⏭️  No changes needed: ${filePath}`);
            return false;
        }
    } catch (error) {
        console.error(`❌ Error updating ${filePath}:`, error.message);
        return false;
    }
}

// Find and update all SQL files
function updateAllSqlFiles() {
    const sqlDirs = [
        'sql/functions',
        'sql/schemas',
        'sql'
    ];
    
    let totalFiles = 0;
    let updatedFiles = 0;
    
    sqlDirs.forEach(dir => {
        if (fs.existsSync(dir)) {
            const files = fs.readdirSync(dir).filter(file => file.endsWith('.sql'));
            files.forEach(file => {
                const filePath = path.join(dir, file);
                totalFiles++;
                if (updateSqlFile(filePath)) {
                    updatedFiles++;
                }
            });
        }
    });
    
    console.log(`\n📊 Summary:`);
    console.log(`  - Total SQL files processed: ${totalFiles}`);
    console.log(`  - Files updated: ${updatedFiles}`);
    console.log(`  - Files unchanged: ${totalFiles - updatedFiles}`);
}

// Main execution
function main() {
    console.log('🔧 Updating SQL files to use configurable values...');
    console.log('📁 Searching for SQL files in sql/, sql/functions/, sql/schemas/');
    
    updateAllSqlFiles();
    
    console.log('\n✅ SQL files updated with configurable values!');
    console.log('📝 Note: Make sure to run the configurable SQL setup first:');
    console.log('   sql/functions/carthorse-configurable-sql.sql');
}

if (require.main === module) {
    main();
}

module.exports = { updateSqlFile, updateAllSqlFiles }; 