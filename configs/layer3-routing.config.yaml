# Route Discovery Configuration
# This file contains settings for pre-computing route recommendations

# ✅ NEW: Trailhead configuration for route generation
#    These settings control trailhead-based route generation
trailheads:
  # Enable trailhead-based route generation
  # When enabled, route generation will use only designated trailhead nodes
  # When disabled, route generation uses automatic selection of degree-1 nodes at network boundaries
  enabled: false                       # Can be overridden by USE_TRAILHEADS_ONLY env var
  
  # Enable automatic endpoint creation from degree-1 nodes
  # When true: automatically uses degree-1 nodes as route endpoints
  # When false: requires manual trailhead configuration
  autoCreateEndpoints: true            # Enable auto-creation of endpoints from degree-1 nodes
  
  # Maximum number of trailheads to use for route generation
  # Higher values provide more route diversity but slower generation
  maxTrailheads: 65                     # Increased by ~30% (from 50)
  
  # Trailhead locations specified by coordinates
  # These are the actual trailhead locations - the system will find the nearest routing nodes
  locations:
    - name: "Test Trailhead 1"
      lat: 39.960197583198685
      lng: -105.23691769326956
      tolerance_meters: 50              # How close to look for routing nodes (default: 50m)
    
    - name: "Chautauqua Trailhead"
      lat: 39.9998007
      lng: -105.2829868
      tolerance_meters: 100             # How close to look for routing nodes (default: 50m)
    
    - name: "NCAR Trailhead"
      lat: 40.0103284
      lng: -105.2900501
      tolerance_meters: 100             # How close to look for routing nodes (default: 50m)
    
    - name: "Flagstaff Trailhead"
      lat: 40.0141479
      lng: -105.295601
      tolerance_meters: 100             # How close to look for routing nodes (default: 50m)
    
    - name: "Boulder Creek Trailhead"
      lat: 39.9787108
      lng: -105.2754759
      tolerance_meters: 100             # How close to look for routing nodes (default: 50m)
    
    - name: "Mesa Trailhead"
      lat: 39.98134
      lng: -105.280376
      tolerance_meters: 100             # How close to look for routing nodes (default: 50m)
    
    - name: "Bear Canyon Trailhead"
      lat: 39.9856735
      lng: -105.2777543
      tolerance_meters: 100             # How close to look for routing nodes (default: 50m)
  
  # Trailhead coordinates for route generation entry points
  # When enabled, route generation will use these predefined trailhead locations
  # When disabled, route generation uses automatic selection of degree-1 nodes at network boundaries
  
  # Validation settings for trailhead configuration
  validation:
    minTrailheads: 1                    # Minimum number of trailheads required
    maxDistanceBetweenTrailheads: 10.0  # Maximum distance between trailheads (km)
    requireParkingAccess: false         # Whether to require parking access (not implemented yet)

# ✅ ACTIVELY USED: Routing tolerance settings for node and edge generation
#    These control the precision of routing graph generation
routing:
  # Single spatial tolerance for all precision operations (in meters)
  # Controls how close trail endpoints need to be for edge generation, intersection detection, etc.
  spatialTolerance: 2.0         # Single tolerance for all precision operations
  
  # Degree2 merge tolerance for chain connectivity (in meters)
  # Controls how close trail endpoints need to be to consider them connected for merging
  # Set to 2.0m to match spatialTolerance for consistent behavior
  degree2MergeTolerance: 2.0    # 2 meters for degree-2 chain connectivity

# ✅ ENABLED: Trail gap filling tolerance for Layer 1 processing
#    This controls how close trail endpoints need to be to create connector trails
trailGapFilling:
  # Tolerance for detecting gaps between trail endpoints (in meters)
  # When two trail endpoints are within this distance, a connector trail is created
  # Note: This only applies to trail endpoints (start/end points), not intersections
  toleranceMeters: 5.0          # 5 meters - create connectors for nearby endpoints
  
  # Maximum number of connector trails to create per export
  # Prevents excessive connector creation in complex networks
  maxConnectors: 100            # Maximum 100 connector trails
  
  # Minimum length for connector trails (in meters)
  # Connectors shorter than this are not created to avoid tiny segments
  minConnectorLengthMeters: 1.0 # Minimum 1 meter connector length
  
  # Enable/disable deduplication of overlapping edges
  # When true: removes duplicate/overlapping trail segments
  # When false: keeps all trail segments (may have overlaps)
  enableOverlapDeduplication: true    # Enable overlap deduplication for cleaner network
  
  # Enable/disable degree-2 chain merging and cleanup
  # When true: merges degree-2 chains into longer edges and cleans up orphaned vertices
  # When false: keeps degree-2 edges separate with vertices between them
  enableDegree2Merging: true    # Enable degree-2 chain merging for better routeability

# ✅ NEW: Layer 1 backfill configuration for external trail data sources
#    These settings control which external APIs are used to backfill missing trails
backfill:
  # Overpass API backfill (OpenStreetMap data)
  # Queries OSM for missing trails in the specified bbox
  overpass:
    enabled: false              # Enable/disable Overpass API backfill
    maxTrails: 500              # Maximum trails to fetch per bbox
    timeoutMs: 3000000          # API timeout in milliseconds
  
  # Enhanced OSM backfill (expanded trail types)
  # Queries OSM with additional trail types: cycleways, bridleways, service roads, etc.
  enhancedOsm:
    enabled: true               # Enable/disable enhanced OSM backfill (FIXED: simplified query and better error handling)
    maxTrails: 200              # Maximum trails to fetch per bbox
    timeoutMs: 6000000          # API timeout in milliseconds
    trailTypes:
      - "hiking"                # Primary hiking trails
      - "mountain_bike"         # Mountain bike trails
      - "bike"                  # Bicycle trails
      - "horse"                 # Horse trails
      - "service_road"          # Service roads with foot access
  
  # Hiking Project API backfill
  # Queries Hiking Project for additional trail data (free tier)
  hikingProject:
    enabled: false              # Enable/disable Hiking Project API backfill
    maxTrails: 100              # Maximum trails to fetch per bbox
    apiKey: ""                  # Hiking Project API key (free registration required)
    timeoutMs: 3000000          # API timeout in milliseconds
  
  # COTREX API backfill (Colorado-specific)
  # Queries Colorado Trail Explorer for official state trail data
  cotrex:
    enabled: false              # Enable/disable COTREX API backfill
    maxTrails: 200              # Maximum trails to fetch per bbox
    timeoutMs: 3000000          # API timeout in milliseconds
    apiKey: ""                  # COTREX API key (required for authentication)
  
  # Minimum trail length for intersection detection (in meters)
  # Trails shorter than this are excluded from intersection detection
  # Set to 0 to include all trails regardless of length
  minTrailLengthMeters: 0  # Can be overridden by MIN_TRAIL_LENGTH_METERS env var
  
  # Minimum distance between routes for deduplication (in kilometers)
  # Set to 0 to disable geographic spacing filtering entirely
  # This prevents routes from being filtered out in dense areas like Chautauqua
  minDistanceBetweenRoutes: 0  # Keep disabled to maximize route output
  
  # KSP (K-Shortest Path) K value for route diversity
  # Higher values generate more diverse routes but take longer to compute
  # Recommended range: 5-15 for good diversity vs performance balance
  kspKValue: 65  # Increased by ~30% (from 50) for more KSP diversity

# ✅ ACTIVELY USED: Route generation settings are used in route generation services
routeGeneration:
  # Route shape type configuration
  # Control which route shapes are generated
  # IMPORTANT: Only routes with explicit "true" values will be generated
  enabled:
    # Enable/disable loop route generation
    # Loop routes start and end at the same point, forming a complete circuit
    loops: true  # ENABLED for massive route generation (30-220k target)
    
    # Enable/disable out-and-back route generation
    # Out-and-back routes go from A to B and back to A (A-B-A pattern)
    outAndBack: true  # ENABLED for massive route generation (30-220k target)
    
    # Enable/disable point-to-point route generation
    # Point-to-point routes go from A to B (A-B pattern)
    # Note: This must be true for out-and-back routes to work, as they are built from P2P routes
    pointToPoint: true  # ENABLED for massive route generation (30-220k target)
    
    # Whether to include point-to-point routes in final output
    # When true, P2P routes are included in exported data
    # When false, P2P routes are only used for out-and-back conversion
    includeP2PRoutesInOutput: true  # Include P2P routes in final output for massive generation
    
    # Enable/disable lollipop route generation
    # Lollipop routes are true loops with minimal edge overlap (start and end at same node)
    lollipops: true  # ENABLED for massive route generation (30-220k target)
  # KSP (K-Shortest Path) route generation settings
  ksp:
    # Enable/disable out-and-back route generation
    # When enabled, generates out-and-back routes using KSP algorithm
    enabled: true  # ENABLED for massive route generation (30-220k target)
    
    # Target number of routes to generate per pattern
    # Higher values generate more routes but take longer to compute
    targetRoutesPerPattern: 1000  # Increased from 100 to 1000 for massive generation
    
    # Maximum number of starting nodes to process
    # Set to -1 to use all available nodes
    maxStartingNodes: -1  # Use all available nodes for maximum route generation
    
    # Whether to remove per-pattern limits to allow accumulation across patterns
    # When true, routes from all patterns are accumulated together
    accumulateAcrossPatterns: true  # Can be overridden by KSP_ACCUMULATE_PATTERNS env var
    
    # Deduplication threshold for out-and-back routes (0-100)
    # When a shorter route has this percentage or more of its edges duplicated in a longer route, the shorter route is removed
    # 0 = no deduplication, 100 = only remove routes that are 100% contained within longer routes
    # Uses edge-based comparison (not length-based)
    dedupeThreshold: 50  # Can be overridden by KSP_DEDUPE_THRESHOLD env var
  
  # Loop route generation settings
  loops:
    # Enable/disable loop route generation
    # When enabled, generates loop routes that start and end at the same point
    enabled: true  # ENABLED for massive route generation (30-220k target)
    
    # Target number of loop routes to generate per pattern
    # Higher values generate more loops but take longer to compute
    targetRoutesPerPattern: 500  # Increased from 20 to 500 for massive generation
    
    # Whether to use Hawick circuits for loop generation
    # Hawick circuits are more efficient for smaller loops
    # DISABLED: Causes memory allocation errors with large networks
    useHawickCircuits: false  # Can be overridden by LOOP_USE_HAWICK env var
    
    # Maximum number of rows to process from pgr_hawickcircuits
    # Higher values find more loops but take longer to compute
    # Default is 5000, increase for more comprehensive loop discovery
    hawickMaxRows: 20000  # Increased from 6000 to 20000 for massive loop discovery
    
    # Deduplication threshold for loop routes (0-100)
    # When a shorter route has this percentage or more of its edges duplicated in a longer route, the shorter route is removed
    # 0 = no deduplication, 100 = only remove routes that are 100% contained within longer routes
    # Uses edge-based comparison (not length-based)
    dedupeThreshold: 50  # Can be overridden by LOOP_DEDUPE_THRESHOLD env var
  
  # Lollipop route generation settings (true loops with minimal edge overlap)
  lollipops:
    # Target distance for lollipop route generation (in kilometers)
    # Routes are generated with outbound distances within a range of this target
    targetDistance: 100  # Increased to 100 for very long routes (30-220k target)
    
    # Maximum number of anchor nodes to process
    # Higher values generate more routes but take longer to compute
    maxAnchorNodes: 130  # Increased by ~30% (from 100) for more anchors
    
    # Maximum number of reachable nodes per anchor
    # Higher values explore more destinations but take longer to compute
    maxReachableNodes: 130  # Increased by ~30% (from 100) for broader search
    
    # Maximum number of destinations to explore per anchor
    # Higher values generate more routes but take longer to compute
    maxDestinationExploration: 65  # Increased by ~30% (from 50) for more destinations
    
    # Distance range for reachable nodes (as percentage of target distance)
    # Nodes within this range of the target distance are considered
    distanceRangeMin: 0.1  # Reduced to 0.1 (10% of 100km = 10km minimum) for more route diversity
    distanceRangeMax: 2.0  # Increased to 2.0 (200% of 100km = 200km maximum) for very long routes
    
    # Edge overlap threshold (percentage)
    # Routes with edge overlap above this threshold are filtered out
    edgeOverlapThreshold: 30  # Can be overridden by LOLLIPOP_EDGE_OVERLAP_THRESHOLD env var
    
    # Number of K-Shortest Paths to explore for return routes
    # Higher values find better return paths but take longer to compute
    kspPaths: 26  # Increased by ~30% (from 20) for more return path options
    
    # Minimum outbound distance (in kilometers)
    # Routes with outbound distances below this are filtered out
    minOutboundDistance: 0.1  # Can be overridden by LOLLIPOP_MIN_OUTBOUND_DISTANCE env var
  
  # General route generation settings
  general:
    # Whether to enable route scoring and filtering
    # When true, routes are scored and filtered based on quality
    enableScoring: true  # Can be overridden by ROUTE_ENABLE_SCORING env var
    
    # Default route score for generated routes
    # Routes with higher scores are preferred
    defaultRouteScore: 100  # Can be overridden by ROUTE_DEFAULT_SCORE env var
    
    # Whether to enable duplicate trail combination filtering
    # When true, routes with identical trail combinations are filtered out
    enableDuplicateFiltering: false  # Only exact identical routes are filtered, regardless of this setting

# ✅ ACTIVELY USED: Discovery settings are used in SQL generation scripts
#    and test files, but not in main application code
discovery:
  # Maximum routes to discover per bin combination
  maxRoutesPerBin: 50                  # ✅ Used in generate-configurable-sql.js
  
  # Quality threshold for route scoring (0.0-1.0)
  minRouteScore: 0.3                   # ✅ Used in generate-configurable-sql.js
  
  # Minimum route distance (km)
  minRouteDistanceKm  : 25.0            # ✅ Used in generate-configurable-sql.js
  
  # Minimum elevation gain (meters)
  minElevationGainMeters: 10           # ✅ Used in generate-configurable-sql.js
  
  # Maximum route distance (km)
  maxRouteDistanceKm: 650.0            # ✅ Increased by ~30% (from 500) for very long routes
  
  # Maximum elevation gain (meters)
  maxElevationGainMeters: 5000         # ✅ Used in generate-configurable-sql.js
  
  # Layer processing timeout (in minutes)
  timeout:
    processingTimeoutMinutes: 120        # 2 hours for massive route generation (30-220k target)

# ✅ ACTIVELY USED: Route scoring weights are used in SQL generation scripts
#    and test files, but not in main application code
scoring:
  # Distance matching weight (0.0-1.0)
  distanceWeight: 0.4                   # ✅ Used in generate-configurable-sql.js
  
  # Elevation matching weight (0.0-1.0)
  elevationWeight: 0.3                  # ✅ Used in generate-configurable-sql.js
  
  # Route quality weight (0.0-1.0)
  qualityWeight: 0.3                    # ✅ Used in generate-configurable-sql.js

# ✅ NEW: Recommendation tolerance levels for route generation
#    These control how flexible the system is when matching target distances/elevations
recommendationTolerances:
  # Strict tolerance - very close to target values (±10% distance, ±15% elevation)
  strict:
    distance: 10                        # 10% tolerance for distance matching (close to target)
    elevation: 15                       # 15% tolerance for elevation matching (close to target)
    quality: 1.0                        # Highest quality score for strict matches
  
  # Medium tolerance - moderate flexibility (±25% distance, ±35% elevation)
  medium:
    distance: 25                        # 25% tolerance for distance matching (moderate flexibility)
    elevation: 35                       # 35% tolerance for elevation matching (moderate flexibility)
    quality: 0.8                        # High quality score for medium matches
  
  # Wide tolerance - very flexible matching (±50% distance, ±75% elevation)
  wide:
    distance: 50                        # 50% tolerance for distance matching (very flexible)
    elevation: 75                       # 75% tolerance for elevation matching (very flexible)
    quality: 0.6                        # Lower quality score for wide matches
  
  # Custom tolerance - user-defined flexibility (±100% distance, ±15% elevation)
  # Set to very permissive for Bear Canyon loop detection
  custom:
    distance: 100                       # 100% tolerance for distance matching (very permissive)
    elevation: 15                       # 15% tolerance for elevation matching (very permissive)
    quality: 0.9                        # Custom quality score

# ✅ ACTIVELY USED: Cost weighting is used in SQL generation scripts
#    and test files, but not in main application code
costWeighting:
  # Steepness weight (higher = avoid steep trails more)
  steepnessWeight: 2.0                  # ✅ Used in generate-configurable-sql.js
  
  # Distance weight (higher = prefer shorter routes more)
  distanceWeight: 0.5                   # ✅ Used in generate-configurable-sql.js
  
  # Cost calculation: (steepness * steepnessWeight) + (distance * distanceWeight)
  # Example: steepness 50m/km + distance 5km = (50 * 2.0) + (5 * 0.5) = 100 + 2.5 = 102.5

  # ✅ NEW: Enhanced cost routing with priority-based deviation penalties
  enhancedCostRouting:
    enabled: true
    description: "Enhanced preference-based cost routing - cost represents deviation from user preferences"
    
    # Priority weights (higher = more important, must sum to 1.0)
    priorityWeights:
      elevation: 0.35                   # 35% weight on elevation gain rate matching
      distance: 0.25                    # 25% weight on distance matching  
      shape: 0.4                        # 40% weight on route shape preference
    
    # Elevation gain rate cost (higher cost = worse match to target)
    elevationCost:
      # Target elevation gain rate deviation cost
      # Cost increases as actual gain rate deviates from target
      deviationWeight: 3.0              # How much to penalize deviation from target gain rate
      deviationExponent: 1.5            # Exponential cost (1.0 = linear, 1.5 = exponential)
    
    # Distance cost (higher cost = worse match to target distance)
    distanceCost:
      # Target distance deviation cost
      deviationWeight: 2.0              # How much to penalize deviation from target distance
      deviationExponent: 1.2            # Exponential cost for distance deviation 