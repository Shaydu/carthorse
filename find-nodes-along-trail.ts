#!/usr/bin/env npx ts-node

import { Pool } from 'pg';
import { getDatabasePoolConfig } from './src/utils/config-loader';

async function findNodesAlongTrail() {
  const schema = process.argv[2];
  if (!schema) {
    console.error('‚ùå Please provide schema name as argument');
    console.error('Usage: npx ts-node find-nodes-along-trail.ts <schema>');
    process.exit(1);
  }

  console.log(`üîç Finding nodes along trail geometry for schema: ${schema}`);

  // The trail geometry coordinates
  const trailCoordinates = [
    [-105.294825, 39.99024, 2178.502197],
    [-105.294852, 39.990221, 2178.502197],
    [-105.294861, 39.990205, 2178.502197],
    [-105.294899, 39.990185, 2178.502197],
    [-105.294928, 39.990152, 2178.502197],
    [-105.294933, 39.990114, 2177.630127],
    [-105.294942, 39.990102, 2177.630127],
    [-105.294999, 39.990052, 2179.941406],
    [-105.295074, 39.990002, 2176.841797],
    [-105.295091, 39.98998, 2176.841797],
    [-105.295091, 39.989909, 2178.497559],
    [-105.295079, 39.989904, 2178.497559],
    [-105.29503, 39.989919, 2178.497559],
    [-105.295015, 39.989917, 2178.497559],
    [-105.295015, 39.989906, 2178.497559],
    [-105.295037, 39.989871, 2178.497559],
    [-105.29503, 39.989858, 2178.497559],
    [-105.295003, 39.989867, 2178.497559],
    [-105.294965, 39.9899, 2178.497559],
    [-105.294879, 39.989912, 2178.055908],
    [-105.294874, 39.989898, 2178.055908],
    [-105.294878, 39.98988, 2178.055908],
    [-105.294909, 39.989849, 2174.470459],
    [-105.294937, 39.989805, 2174.470459],
    [-105.294935, 39.989781, 2174.470459],
    [-105.294852, 39.989787, 2174.470459],
    [-105.294761, 39.989815, 2170.500488],
    [-105.294648, 39.989834, 2168.798096],
    [-105.294404, 39.989833, 2165.714111],
    [-105.294391, 39.989824, 2165.714111],
    [-105.294412, 39.98981, 2165.714111],
    [-105.294479, 39.989789, 2159.791504],
    [-105.294482, 39.989778, 2159.791504],
    [-105.294436, 39.989764, 2165.714111],
    [-105.294337, 39.989762, 2159.191406],
    [-105.294323, 39.98975, 2159.191406],
    [-105.294334, 39.989736, 2159.191406],
    [-105.294401, 39.98972, 2152.401611],
    [-105.29431, 39.98969, 2159.191406],
    [-105.294252, 39.989717, 2159.191406],
    [-105.294157, 39.98971, 2151.054443],
    [-105.294108, 39.98972, 2151.054443],
    [-105.293951, 39.989696, 2149.844238],
    [-105.293889, 39.989703, 2149.844238],
    [-105.293738, 39.989691, 2145.399414],
    [-105.293671, 39.989699, 2145.399414],
    [-105.293705, 39.989731, 2145.399414],
    [-105.293713, 39.989748, 2145.399414],
    [-105.293783, 39.989768, 2138.731445],
    [-105.293786, 39.989776, 2138.731445],
    [-105.293624, 39.989788, 2136.532959],
    [-105.293552, 39.989779, 2136.532959],
    [-105.293596, 39.989817, 2136.532959],
    [-105.293648, 39.989833, 2136.532959],
    [-105.293656, 39.989849, 2129.471924],
    [-105.293676, 39.989863, 2129.471924],
    [-105.293725, 39.989924, 2129.471924],
    [-105.293722, 39.989938, 2129.471924],
    [-105.293635, 39.989932, 2123.122559],
    [-105.29358, 39.989916, 2123.122559],
    [-105.293536, 39.989922, 2120.097656],
    [-105.293509, 39.989913, 2120.097656],
    [-105.293413, 39.989904, 2121.440918],
    [-105.293595, 39.990064, 2113.997314],
    [-105.293619, 39.99011, 2113.997314],
    [-105.293624, 39.990192, 2113.340088],
    [-105.293585, 39.990182, 2113.340088],
    [-105.29355, 39.990151, 2109.653076],
    [-105.293525, 39.990145, 2109.653076],
    [-105.293529, 39.99016, 2109.653076],
    [-105.293568, 39.9902, 2113.340088],
    [-105.293558, 39.990213, 2113.340088],
    [-105.293511, 39.990182, 2109.653076],
    [-105.29347, 39.990179, 2109.653076],
    [-105.29341, 39.990148, 2101.130127],
    [-105.293358, 39.990151, 2101.130127],
    [-105.293309, 39.990134, 2097.294678],
    [-105.293246, 39.990128, 2097.294678],
    [-105.293229, 39.990131, 2097.294678],
    [-105.293257, 39.990161, 2097.294678],
    [-105.293311, 39.990193, 2097.294678],
    [-105.293339, 39.990241, 2097.294678],
    [-105.29325, 39.990216, 2097.294678],
    [-105.293217, 39.990217, 2086.330566],
    [-105.293142, 39.990191, 2082.495117],
    [-105.293078, 39.990182, 2082.495117],
    [-105.29313, 39.990233, 2082.495117],
    [-105.293228, 39.990297, 2079.995117],
    [-105.293281, 39.990347, 2083.876465],
    [-105.293139, 39.99029, 2075.325439],
    [-105.29304, 39.990279, 2072.424316],
    [-105.292957, 39.990256, 2072.424316],
    [-105.292948, 39.99026, 2076.671143],
    [-105.292989, 39.990319, 2072.424316],
    [-105.293077, 39.990353, 2075.325439],
    [-105.293129, 39.990395, 2075.325439],
    [-105.293157, 39.990466, 2068.494141],
    [-105.293229, 39.99049, 2068.494141],
    [-105.29325, 39.990511, 2075.598145],
    [-105.293242, 39.990522, 2068.494141],
    [-105.293208, 39.990506, 2068.494141],
    [-105.293085, 39.990505, 2063.529541],
    [-105.293005, 39.990452, 2065.163818],
    [-105.292987, 39.990454, 2065.163818],
    [-105.292981, 39.990462, 2065.163818],
    [-105.292987, 39.990498, 2065.163818],
    [-105.292909, 39.990474, 2055.658203],
    [-105.292834, 39.990472, 2052.458008],
    [-105.292832, 39.990485, 2052.458008],
    [-105.292871, 39.990512, 2055.658203],
    [-105.292882, 39.990539, 2055.658203],
    [-105.292904, 39.990565, 2049.688232],
    [-105.292932, 39.990588, 2049.688232],
    [-105.292965, 39.990599, 2054.424316],
    [-105.292986, 39.990616, 2054.424316],
    [-105.292918, 39.990614, 2049.688232],
    [-105.292854, 39.990624, 2049.688232],
    [-105.292647, 39.990555, 2047.465698],
    [-105.292535, 39.990485, 2045.154419],
    [-105.292479, 39.990473, 2045.154419],
    [-105.29244, 39.990508, 2041.386841],
    [-105.292392, 39.990478, 2041.386841],
    [-105.292361, 39.990476, 2041.386841],
    [-105.292356, 39.990452, 2041.386841],
    [-105.29228, 39.990419, 2036.171265],
    [-105.292269, 39.990407, 2036.171265],
    [-105.292265, 39.990388, 2036.171265],
    [-105.292273, 39.990371, 2036.171265],
    [-105.29226, 39.990352, 2036.171265],
    [-105.292261, 39.990303, 2034.865479],
    [-105.292249, 39.99028, 2034.865479],
    [-105.292216, 39.990317, 2034.865479],
    [-105.292192, 39.990332, 2034.865479],
    [-105.29215, 39.990382, 2030.199219],
    [-105.292145, 39.990412, 2030.199219],
    [-105.292127, 39.990445, 2030.199219],
    [-105.2921, 39.990443, 2030.199219],
    [-105.292079, 39.990462, 2023.413818],
    [-105.292064, 39.990447, 2030.199219],
    [-105.292058, 39.990424, 2030.199219],
    [-105.292041, 39.990427, 2023.413818],
    [-105.292002, 39.990504, 2018.060303],
    [-105.292002, 39.990533, 2018.060303],
    [-105.291993, 39.990548, 2018.060303],
    [-105.291917, 39.990575, 2016.335449],
    [-105.291887, 39.990599, 2016.335449],
    [-105.291862, 39.990608, 2016.335449],
    [-105.291827, 39.990648, 2013.964966],
    [-105.291807, 39.990658, 2011.838379],
    [-105.291795, 39.990676, 2011.838379],
    [-105.291802, 39.990726, 2011.838379],
    [-105.29179, 39.990751, 2006.443115],
    [-105.291713, 39.990789, 2006.362549],
    [-105.291688, 39.990786, 2006.362549],
    [-105.29167, 39.990776, 2006.362549],
    [-105.291647, 39.990745, 2005.199707],
    [-105.291625, 39.990683, 2005.199707],
    [-105.291612, 39.990681, 2005.199707],
    [-105.291595, 39.990705, 2005.199707],
    [-105.291573, 39.990774, 2001.451538],
    [-105.291569, 39.990812, 2001.451538],
    [-105.291553, 39.990816, 2001.451538],
    [-105.291503, 39.990772, 2001.451538],
    [-105.291492, 39.990752, 2001.451538],
    [-105.291495, 39.990726, 2001.774658],
    [-105.291479, 39.990725, 2001.774658],
    [-105.291456, 39.990756, 2001.451538],
    [-105.291433, 39.990773, 1997.061401],
    [-105.291405, 39.990858, 1994.518555],
    [-105.291402, 39.990903, 1994.518555],
    [-105.291416, 39.99093, 1994.518555],
    [-105.291475, 39.990986, 1989.017822],
    [-105.291543, 39.991036, 1989.017822],
    [-105.29159, 39.991052, 1985.88208],
    [-105.29173, 39.991077, 1986.327393],
    [-105.291782, 39.991112, 1980.444092],
    [-105.291823, 39.99112, 1980.444092],
    [-105.291942, 39.991201, 1981.705566],
    [-105.292031, 39.991284, 1977.484497],
    [-105.292052, 39.991331, 1975.102661],
    [-105.292105, 39.991362, 1975.102661],
    [-105.292117, 39.991404, 1975.102661],
    [-105.292145, 39.991443, 1975.102661],
    [-105.292141, 39.991451, 1973.763794],
    [-105.292132, 39.991451, 1973.763794],
    [-105.292108, 39.991441, 1975.102661],
    [-105.292052, 39.991442, 1975.102661],
    [-105.291924, 39.991424, 1965.633911],
    [-105.291888, 39.991433, 1965.633911],
    [-105.291835, 39.991421, 1963.174805],
    [-105.29179, 39.99142, 1963.174805],
    [-105.291795, 39.991445, 1963.174805],
    [-105.291837, 39.991481, 1963.174805],
    [-105.291842, 39.991492, 1963.174805],
    [-105.291837, 39.991509, 1963.174805],
    [-105.291773, 39.9915, 1963.174805],
    [-105.291675, 39.991499, 1957.556396],
    [-105.291648, 39.991477, 1959.372559],
    [-105.291552, 39.991511, 1959.372559],
    [-105.291546, 39.991518, 1953.656494],
    [-105.291549, 39.991535, 1953.656494],
    [-105.291571, 39.991572, 1953.656494],
    [-105.291586, 39.991628, 1953.656494],
    [-105.291572, 39.991642, 1953.656494],
    [-105.29154, 39.991642, 1949.955933],
    [-105.291466, 39.991611, 1949.955933],
    [-105.291437, 39.991612, 1947.988159],
    [-105.291436, 39.991638, 1947.988159],
    [-105.291473, 39.991696, 1943.861206],
    [-105.29145, 39.991716, 1943.861206],
    [-105.291411, 39.991714, 1943.861206],
    [-105.291284, 39.991676, 1940.590332],
    [-105.291216, 39.991676, 1940.590332],
    [-105.291166, 39.991696, 1940.590332],
    [-105.291029, 39.991714, 1936.199219],
    [-105.290928, 39.991707, 1934.319336],
    [-105.290748, 39.991742, 1931.242432],
    [-105.290698, 39.991757, 1930.209229],
    [-105.290596, 39.991763, 1924.952637],
    [-105.290586, 39.991773, 1924.952637],
    [-105.290587, 39.991783, 1924.952637],
    [-105.290619, 39.991804, 1924.952637],
    [-105.290646, 39.991836, 1924.952637],
    [-105.290627, 39.991848, 1924.952637],
    [-105.290486, 39.99182, 1922.476196],
    [-105.29043, 39.991822, 1919.268677],
    [-105.290377, 39.991807, 1919.268677],
    [-105.290347, 39.991806, 1917.046875],
    [-105.290213, 39.991835, 1915.876953],
    [-105.290172, 39.991834, 1915.876953],
    [-105.290132, 39.991847, 1914.677856],
    [-105.289972, 39.991848, 1913.412354],
    [-105.289944, 39.991874, 1910.195923],
    [-105.289793, 39.991929, 1909.056641],
    [-105.289691, 39.991927, 1907.406494],
    [-105.289557, 39.991885, 1905.617676],
    [-105.289515, 39.991867, 1903.689453],
    [-105.289409, 39.991798, 1903.33252],
    [-105.289335, 39.99177, 0]
  ];

  // Connect to database
  const dbConfig = getDatabasePoolConfig();
  const pool = new Pool(dbConfig);

  try {
    console.log('‚úÖ Connected to database');

    // Create a PostGIS LineString from the coordinates
    const coordinatesWKT = trailCoordinates.map(coord => `${coord[0]} ${coord[1]} ${coord[2]}`).join(',');
    const lineStringWKT = `LINESTRING Z (${coordinatesWKT})`;

    console.log(`\nüõ§Ô∏è  Trail geometry: ${trailCoordinates.length} coordinate points`);
    console.log(`   Start: ${trailCoordinates[0][0]}, ${trailCoordinates[0][1]}, ${trailCoordinates[0][2]}`);
    console.log(`   End: ${trailCoordinates[trailCoordinates.length - 1][0]}, ${trailCoordinates[trailCoordinates.length - 1][1]}, ${trailCoordinates[trailCoordinates.length - 1][2]}`);

    // Find nodes that are close to this trail (within 10 meters)
    const findNodesQuery = `
      WITH trail_geom AS (
        SELECT ST_SetSRID(ST_GeomFromText($1), 4326) as geom
      )
      SELECT 
        rn.id,
        rn.node_uuid,
        rn.lat,
        rn.lng,
        rn.elevation,
        rn.node_type,
        rn.connected_trails,
        ST_Distance(
          ST_SetSRID(ST_MakePoint(rn.lng, rn.lat), 4326),
          tg.geom
        ) * 111320 as distance_meters,
        ST_LineLocatePoint(tg.geom, ST_SetSRID(ST_MakePoint(rn.lng, rn.lat), 4326)) as position_along_line
      FROM ${schema}.routing_nodes rn
      CROSS JOIN trail_geom tg
      WHERE ST_DWithin(
        ST_SetSRID(ST_MakePoint(rn.lng, rn.lat), 4326),
        tg.geom,
        0.0001  -- ~10 meters in degrees
      )
      ORDER BY distance_meters;
    `;

    const nodesResult = await pool.query(findNodesQuery, [lineStringWKT]);

    if (nodesResult.rows.length === 0) {
      console.log('‚ùå No nodes found within 10 meters of this trail');
      return;
    }

    console.log(`\nüéØ Found ${nodesResult.rows.length} nodes along this trail:`);

    for (const node of nodesResult.rows) {
      console.log(`\n   Node ${node.id} (${node.node_uuid}):`);
      console.log(`     Coordinates: ${node.lng}, ${node.lat}, ${node.elevation}`);
      console.log(`     Distance from trail: ${node.distance_meters.toFixed(2)} meters`);
      console.log(`     Position along trail: ${(node.position_along_line * 100).toFixed(1)}%`);
      console.log(`     Current type: ${node.node_type}`);
      console.log(`     Connected trails: ${node.connected_trails}`);

      // Mark this node for snap and split (Y intersection)
      const updatePredictionQuery = `
        INSERT INTO ${schema}.graphsage_predictions (node_id, prediction, confidence)
        VALUES ($1, 2, 1.0)
        ON CONFLICT (node_id) DO UPDATE SET
          prediction = 2,
          confidence = 1.0;
      `;

      await pool.query(updatePredictionQuery, [node.id]);

      // Update node type
      const updateNodeTypeQuery = `
        UPDATE ${schema}.routing_nodes 
        SET node_type = 'y_intersection'
        WHERE id = $1;
      `;

      await pool.query(updateNodeTypeQuery, [node.id]);

      console.log(`     ‚úÖ Marked for Y intersection split (prediction: 2, confidence: 1.0)`);
    }

    console.log(`\nüéØ Summary:`);
    console.log(`   ‚Ä¢ Found ${nodesResult.rows.length} nodes along the trail`);
    console.log(`   ‚Ä¢ All nodes marked for Y intersection split`);
    console.log(`   ‚Ä¢ Trail spans from ${trailCoordinates[0][0]}, ${trailCoordinates[0][1]} to ${trailCoordinates[trailCoordinates.length - 1][0]}, ${trailCoordinates[trailCoordinates.length - 1][1]}`);

  } catch (error) {
    console.error('‚ùå Error:', error instanceof Error ? error.message : String(error));
  } finally {
    await pool.end();
  }
}

findNodesAlongTrail().catch(console.error);
