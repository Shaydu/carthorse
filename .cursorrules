# Carthorse Development Rules

## MANDATORY: Use CarthorseOrchestrator for ALL Operations

### ‚úÖ ALWAYS Use Orchestrator Commands
- **NEVER** create one-off scripts or manual installations
- **NEVER** manually install database functions
- **NEVER** run direct SQL commands for database setup
- **ALWAYS** use `CarthorseOrchestrator` methods for all operations

### üö´ FORBIDDEN: Manual Database Operations
- ‚ùå `psql -f sql/schemas/carthorse-complete-schema.sql`
- ‚ùå `psql -c "CREATE FUNCTION..."` 
- ‚ùå Direct database function installations
- ‚ùå One-off SQL scripts
- ‚ùå Manual schema installations

### ‚úÖ REQUIRED: Orchestrator Workflow
1. **Install**: `npx ts-node src/orchestrator/CarthorseOrchestrator.ts install`
2. **Export**: `npx ts-node src/orchestrator/CarthorseOrchestrator.ts export --region <region> --out <file.db>`
3. **Validate**: `npx ts-node src/orchestrator/CarthorseOrchestrator.ts validate --region <region>`
4. **Cleanup**: `npx ts-node src/orchestrator/CarthorseOrchestrator.ts cleanup`

### üß™ Test Configuration
- **ALWAYS** use the test configuration system: `src/config/test-config-loader.ts`
- **NEVER** hardcode database connections in tests
- **ALWAYS** use `TEST_CONFIG` from the centralized config

### üìÅ File Organization
- **NEVER** create one-off scripts in root directory
- **ALWAYS** use existing CLI commands in `src/cli/`
- **ALWAYS** use existing orchestrator methods
- **NEVER** create temporary or disposable files

### üîß Database Setup
- **ALWAYS** use `CarthorseOrchestrator.install()` for schema installation
- **ALWAYS** use `CarthorseOrchestrator.installTestDatabase()` for test setup
- **NEVER** manually create or modify database schemas
- **NEVER** manually install PostGIS functions

### üßπ Cleanup
- **ALWAYS** use `CarthorseOrchestrator.cleanAllTestDatabases()` for cleanup
- **NEVER** manually drop schemas or tables
- **ALWAYS** use the orchestrator's built-in cleanup methods

### üìù Documentation
- **ALWAYS** update `README.md` for new features
- **ALWAYS** document new CLI commands
- **NEVER** create separate documentation files for one-off operations

### üö® Error Handling
- **ALWAYS** fix the root cause (missing functions, schema issues)
- **NEVER** work around problems with manual fixes
- **ALWAYS** use the orchestrator's error handling and validation

### üéØ Development Workflow
1. Identify the issue (missing function, schema problem, etc.)
2. Fix it in the orchestrator's installation/validation process
3. Test with the orchestrator commands
4. Update tests to use the proper orchestrator workflow
5. **NEVER** create temporary workarounds

### üìä Test Strategy
- **ALWAYS** use the staging integration test suite for staging-dependent tests
- **NEVER** create individual test files that bypass the orchestrator
- **ALWAYS** test the full orchestrator workflow
- **NEVER** test individual components in isolation

### üîç Debugging
- **ALWAYS** use orchestrator's built-in logging and validation
- **NEVER** add manual debugging to individual test files
- **ALWAYS** fix issues at the orchestrator level

## ENFORCEMENT
- **REJECT** any request to create one-off scripts
- **REJECT** any request to manually install database functions
- **REJECT** any request to bypass the orchestrator
- **ALWAYS** redirect to proper orchestrator commands
- **ALWAYS** fix issues in the orchestrator, not with workarounds

## REMEMBER
The orchestrator is the single source of truth for all Carthorse operations. Everything must go through it. 